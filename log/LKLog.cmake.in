set(LILAK_PATH @LILAK_PATH@)
set(CREATE_GIT_LOG @CREATE_GIT_LOG@)
set(BUILD_DOXYGEN_DOC @BUILD_DOXYGEN_DOC@)
set(LILAK_PROJECT_MAIN @LILAK_PROJECT_MAIN@)

find_package(Git)
if(CREATE_GIT_LOG)
    if(NOT GIT_FOUND)
        message(FATAL_ERROR "Git is needed to create git-log.")
        set(CREATE_GIT_LOG off)
    endif()
endif()

if(BUILD_DOXYGEN_DOC)
    find_package(Doxygen)
    if(NOT DOXYGEN_FOUND)
        message(FATAL_ERROR "Doxygen is needed to build the documentation.")
        set(BUILD_DOXYGEN_DOC off)
    endif()
endif()

if(CREATE_GIT_LOG)
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
        OUTPUT_VARIABLE LILAK_GIT_BRANCH
        OUTPUT_STRIP_TRAILING_WHITESPACE 
        WORKING_DIRECTORY ${LILAK_PATH})
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-list --count ${LILAK_GIT_BRANCH}
        OUTPUT_VARIABLE LILAK_GIT_COMMIT_COUNT
        OUTPUT_STRIP_TRAILING_WHITESPACE
        WORKING_DIRECTORY ${LILAK_PATH})
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short ${LILAK_GIT_BRANCH}
        OUTPUT_VARIABLE LILAK_GIT_HASH_SHORT
        OUTPUT_STRIP_TRAILING_WHITESPACE
        WORKING_DIRECTORY ${LILAK_PATH})
    if("${LILAK_GIT_COMMIT_COUNT}" STREQUAL "")
        set(LILAK_GIT_COMMIT_COUNT 0)
    endif()
    set(LILAK_VERSION "${LILAK_GIT_BRANCH}.${LILAK_GIT_COMMIT_COUNT}.${LILAK_GIT_HASH_SHORT}")
    set(LILAK_HASH "${LILAK_GIT_HASH_SHORT}")
    message(STATUS "lilak version: " ${LILAK_VERSION})

    execute_process(COMMAND ${GIT_EXECUTABLE} branch -l
        OUTPUT_VARIABLE LILAK_GIT_BRANCH_LIST 
        OUTPUT_STRIP_TRAILING_WHITESPACE 
        WORKING_DIRECTORY ${LILAK_PATH})
    string(REPLACE "\n" ";" LILAK_GIT_BRANCH_LIST "${LILAK_GIT_BRANCH_LIST}")
    string(REPLACE " " "" LILAK_GIT_BRANCH_LIST "${LILAK_GIT_BRANCH_LIST}")
    string(REPLACE "*" "" LILAK_GIT_BRANCH_LIST "${LILAK_GIT_BRANCH_LIST}")

    foreach(_branch ${LILAK_GIT_BRANCH_LIST})
        execute_process(COMMAND ${GIT_EXECUTABLE} log --reverse --oneline ${_branch} OUTPUT_VARIABLE LILAK_GIT_BRANCH_LOGS)
        list(APPEND LILAK_GIT_BRANCH_LOG_LIST "__BRANCH__ ${_branch}")
        foreach(_log ${LILAK_GIT_BRANCH_LOGS})
            list(APPEND LILAK_GIT_BRANCH_LOG_LIST ${_log})
        endforeach(_log)
    endforeach(_branch)

    string(REPLACE ";" "\n" LILAK_GIT_BRANCH_LOG_LIST "${LILAK_GIT_BRANCH_LOG_LIST}")

    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
        OUTPUT_VARIABLE MAINPROJECT_GIT_BRANCH
        OUTPUT_STRIP_TRAILING_WHITESPACE
        WORKING_DIRECTORY ${LILAK_PATH}/${LILAK_PROJECT_MAIN})
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-list --count ${MAINPROJECT_GIT_BRANCH}
        OUTPUT_VARIABLE MAINPROJECT_GIT_COMMIT_COUNT
        OUTPUT_STRIP_TRAILING_WHITESPACE
        WORKING_DIRECTORY ${LILAK_PATH}/${LILAK_PROJECT_MAIN})
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short ${MAINPROJECT_GIT_BRANCH}
        OUTPUT_VARIABLE MAINPROJECT_GIT_HASH_SHORT
        OUTPUT_STRIP_TRAILING_WHITESPACE
        WORKING_DIRECTORY ${LILAK_PATH}/${LILAK_PROJECT_MAIN})
    set(MAINPROJECT_VERSION "${MAINPROJECT_GIT_BRANCH}.${MAINPROJECT_GIT_COMMIT_COUNT}.${MAINPROJECT_GIT_HASH_SHORT}")
    set(MAINPROJECT_HASH "${MAINPROJECT_GIT_HASH_SHORT}")
    message(STATUS "Main project version: " ${MAINPROJECT_VERSION})

    execute_process(COMMAND ${GIT_EXECUTABLE} log --pretty=format:"%h %an %ar : %s" -1 OUTPUT_VARIABLE LILAK_GIT_LOG_TEMP)
    execute_process(COMMAND ${GIT_EXECUTABLE} status -s      OUTPUT_VARIABLE LILAK_GIT_STATUS OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND ${GIT_EXECUTABLE} diff -U0 OUTPUT_VARIABLE LILAK_GIT_DIFF OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REPLACE \" "" LILAK_GIT_LOG ${LILAK_GIT_LOG_TEMP})

    cmake_host_system_information(RESULT LILAK_HOSTNAME QUERY HOSTNAME)

    set(LILAK_USERNAME $ENV{USER})

    configure_file(${LILAK_PATH}/log/LKCompiled.h.in  ${LILAK_PATH}/log/LKCompiled.h @ONLY)
    configure_file(${LILAK_PATH}/log/LKCompiledStatus.log.in ${LILAK_PATH}/log/LKCompiledStatus.log @ONLY)
    configure_file(${LILAK_PATH}/log/LKCompiledDiff.log.in ${LILAK_PATH}/log/LKCompiledDiff.log @ONLY)
    configure_file(${LILAK_PATH}/log/LKBranchList.log.in ${LILAK_PATH}/log/LKBranchList.log @ONLY)
endif()

configure_file(${LILAK_PATH}/log/doxy.conf.in ${LILAK_PATH}/log/doxy.conf @ONLY)
if(BUILD_DOXYGEN_DOC)
  execute_process(COMMAND ${DOXYGEN_EXECUTABLE} ${LILAK_PATH}/log/doxy.conf 
                  WORKING_DIRECTORY ${LILAK_PATH})
endif()
